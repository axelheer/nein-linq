<Project>

  <PropertyGroup>
    <IncludeSymbols>true</IncludeSymbols>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>

  <PropertyGroup>
    <Authors>Axel Heer</Authors>
    <Copyright>Copyright Â© 2014-2021 Axel Heer</Copyright>
    <Description>NeinLinq provides helpful extensions for using LINQ providers such as Entity Framework that support only a minor subset of .NET functions, reusing functions, rewriting queries, even making them null-safe, and building dynamic queries using translatable predicates and selectors.

To support different LINQ implementations, the following flavours are available. Choose at least one.

- Use NeinLinq for plain LINQ queries
- Use NeinLinq.Async for async LINQ queries
- Use NeinLinq.EntityFramework for Entity Framework 6 LINQ queries
- Use NeinLinq.EntityFrameworkCore for Entity Framework Core LINQ queries</Description>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)icon.png" Pack="true" PackagePath="\" />
  </ItemGroup>

  <PropertyGroup>
    <PackageIcon>icon.png</PackageIcon>
    <PackageProjectUrl>https://github.com/axelheer/nein-linq</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageReleaseNotes>Add EF Core extension for global lambda injection.</PackageReleaseNotes>
    <PackageTags>LINQ;EF;IX</PackageTags>
  </PropertyGroup>

</Project>
